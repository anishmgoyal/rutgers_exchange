/offers

    PUT
        Creates an offer. Once this is accepted, the server automatically generates a conversation between the two users.
        
        PARAMS:
            String user_id, String session_token, String csrf_token, String product_id, int price
            //Again, price is price multiplied by 100, so it shouldn't have a decimal.
            
        RET:
            STATUS 200
                Success: {error: false <boolean>, id: offer_id <int>}
                Failure: {error: true <boolean>, errors: [{field: fieldname <string>, message: validation_message <string>}]}
                
            STATUS 471
                The user has already created an offer for this product, and must delete it before creating another one.
                
            STATUS 472
                The user owns this product, and cannot make an offer to him/herself.
                
            STATUS 473
                The product has already been sold
                
            STATUS 403
                The user is not logged in.
                
            STATUS 404
                The product does not exist.
            
    GET
        Gets information about the pending offers for a user, or offers a user has made
        
        PARAMS:
            String user_id, String session_token, String csrf_token, boolean include_offers_made_by_current_user, boolean include_offers_made_by_other_users, [String product_id]
            // if product id is specified, this method will return only offers for a specific product
            // a user can see: all offers made on products they are selling, any offers they have made towards other products.
            
        RET:
            STATUS 200
                Success: {offers: [{offer_id: offer_id <int>, product_name: product_name <string>, user: {first_name: first_name <string>, last_name: last_name <string>}, price: price <int>}]}
            
            STATUS 403
                The user is not logged in.
                
            STATUS 404
                If product id is specified, but does not exist.
            
/offers/:id

    GET
        Gets information about an offer. Should be viewable by the creator of the product the offer is for.
        
        PARAMS:
            String user_id, String session_token, String csrf_token, int price
            
        RET:
            STATUS 200
                Success: {offer_id: offer_id <int>, product: {product_id: product_id <int>, product_name: product_name <string>, product_type: product_type <string>, product_sold_status: product_sold_status <string>, price: price <int>, description: description <string>}, price: price <int>}
            
            STATUS 472
                The user is neither the buyer or seller.
            
            STATUS 403
                The user is not logged in.
                
            STATUS 404
                The offer could not be found.

    POST
        Updates an offer (notably the price being offered).

        PARAMS:
            String user_id, String session_token, String csrf_token

        RET:
            STATUS 200
                Success: {error: false <boolean>, id: offer_id <int>}
                Failure: {error: true <boolean>, errors: [{field: fieldname <string>, message: validation_message <string>}]}

            STATUS 472
                The user is not the creator of the offer.

            STATUS 473
                The offer has already been accepted, or the transaction is complete

            STATUS 403
                The user is not logged in.

            STATUS 404
                The offer was not found.
            
    DELETE
        Revokes, rejects, or backs out of an offer for any reason. Deletes the corresponding conversation, sets product status as "SOLD_NOT_SOLD"
        
        PARAMS:
            String user_id, String session_token, String csrf_token
            
        RET:
            STATUS 200
                Success
                
            STATUS 472
                The user is neither the buyer or seller.

            STATUS 473
                The transaction regarding this offer has already been completed. In order for this offer to be deleted,
                the related product must be deleted.
                
            STATUS 403
                The user is not logged in.

            STATUS 404
                The offer was not found.
             
/offers/accept/:id

    POST
        Accepts an offer. Marks the product status as "SOLD_IN_TRANSACTION", creates a conversation between buyer and seller
        
        PARAMS:
            String user_id, String session_token, String csrf_token
            
        RET:
            STATUS 200
                Success: { conversation_id: conversation_id <string> }
                
            STATUS 471
                This offer has already been accepted.
                
            STATUS 472
                The user is not authorized to make this request. (Doesn't own the product being sold)
                
            STATUS 403
                The user is not logged in.

            STATUS 404
                The offer was not found.

/offers/complete/:id

    POST
        Completes a transaction. Marks the product status as "SOLD_SOLD"
        
        PARAMS:
            String user_id, String session_token, String csrf_token.
    
        RET:
            STATUS 200
                Success
                
            STATUS 472
                The user is not authorized to make this request. (Doesn't own the product being sold)
            
            STATUS 403
                The user is not logged in.

            STATUS 404
                The offer was not found.